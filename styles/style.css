* {
  padding: 0;
  margin: 0;
  -webkit-tap-highlight-color: transparent;
}

html,
body,
div {
  box-sizing: border-box;
}

a {
  text-decoration: none;
}

input {
  --border-style: 2px solid rgb(var(--color-outline));
  width: 100%;
  font-size: inherit;
  color: currentColor;
  caret-color: currentColor;
  text-indent: var(--text-indent);
  background-color: transparent;
  outline: none;
  border: none;
  transition: 0.4s ease-in-out;
  &[type='search']::-webkit-search-cancel-button {
    -webkit-appearance: none;
  }
  &.line {
    border-bottom: var(--border-style);
  }
  &.bordered {
    border-radius: 2rem;
    border: var(--border-style);
  }
  &.input_loading {
    animation: breathing 2s ease-in-out infinite;
  }
  &:focus-visible {
    border-color: rgb(var(--color-primary));
  }
}

html,
body {
  height: 100%;
  overscroll-behavior: none;
  overflow-y: hidden;
}

:root {
  --rem: 4;
  --text-indent: 2rem;
  font-size: calc(var(--rem) * 1px);
  --font-size-max: 15rem;
  --font-size-middle: 7.5rem;
  --font-size-normal: 4.5rem;
  --font-size-small: 12px;
  --radius: 12rem;
  --spacing: 4rem;
  --layer-top: 3;
  --layer-mid: 2;
  --layer-normal: 1;
  .dark {
    --color-container: var(--dark-color-background);
    --color-on-container: var(--dark-color-on-background);
    --color-primary: var(--dark-color-primary);
    --color-on-primary: var(--dark-color-on-primary);
    --color-primary-container: var(--dark-color-primary-container);
    --color-on-primary-container: var(--dark-color-on-primary-container);
    --color-secondary: var(--dark-color-secondary);
    --color-on-secondary: var(--dark-color-on-secondary);
    --color-secondary-container: var(--dark-color-secondary-container);
    --color-on-secondary-container: var(--dark-color-on-secondary-container);
    --color-tertiary: var(--dark-color-tertiary);
    --color-on-tertiary: var(--dark-color-on-tertiary);
    --color-tertiary-container: var(--dark-color-tertiary-container);
    --color-on-tertiary-container: var(--dark-color-on-tertiary-container);
    --color-error-container: var(--dark-color-error);
    --color-on-error-container: var(--dark-color-on-error);
    --color-surface: var(--dark-color-surface);
    --color-on-surface: var(--dark-color-on-surface);
    --color-outline: var(--dark-color-outline);
    &.amoled {
      --color-container: 0 0 0;
    }
  }
}

:root .light,
body.auto {
  --color-container: var(--light-color-background);
  --color-on-container: var(--light-color-on-background);
  --color-primary: var(--light-color-primary);
  --color-on-primary: var(--light-color-on-primary);
  --color-primary-container: var(--light-color-primary-container);
  --color-on-primary-container: var(--light-color-on-primary-container);
  --color-secondary: var(--light-color-secondary);
  --color-on-secondary: var(--light-color-on-secondary);
  --color-secondary-container: var(--light-color-secondary-container);
  --color-on-secondary-container: var(--light-color-on-secondary-container);
  --color-tertiary: var(--light-color-tertiary);
  --color-on-tertiary: var(--light-color-on-tertiary);
  --color-tertiary-container: var(--light-color-tertiary-container);
  --color-on-tertiary-container: var(--light-color-on-tertiary-container);
  --color-error-container: var(--light-color-error);
  --color-on-error-container: var(--light-color-on-error);
  --color-surface: var(--light-color-surface);
  --color-on-surface: var(--light-color-on-surface);
  --color-outline: var(--light-color-outline);
  .header {
    background-color: rgb(var(--color-container));
  }
}

body {
  &.auto {
    /* TODO: Duplicate css code */
    @media (prefers-color-scheme: dark) {
      --color-container: var(--dark-color-background);
      --color-on-container: var(--dark-color-on-background);
      --color-primary: var(--dark-color-primary);
      --color-on-primary: var(--dark-color-on-primary);
      --color-primary-container: var(--dark-color-primary-container);
      --color-on-primary-container: var(--dark-color-on-primary-container);

      --color-secondary: var(--dark-color-secondary);
      --color-on-secondary: var(--dark-color-on-secondary);
      --color-secondary-container: var(--dark-color-secondary-container);
      --color-on-secondary-container: var(--dark-color-on-secondary-container);
      --color-tertiary: var(--dark-color-tertiary);
      --color-on-tertiary: var(--dark-color-on-tertiary);
      --color-tertiary-container: var(--dark-color-tertiary-container);
      --color-on-tertiary-container: var(--dark-color-on-tertiary-container);
      --color-error-container: var(--dark-color-error);
      --color-on-error-container: var(--dark-color-on-error);
      --color-surface: var(--dark-color-surface);
      --color-on-surface: var(--dark-color-on-surface);
      --color-outline: var(--dark-color-outline);
      &.amoled {
        --color-container: 0 0 0;
      }
    }
  }
  font-family: system-ui, -apple-system, BlinkMacSystemFont, Helvetica, Arial, sans-serif;
  background: rgb(var(--color-container));
  font-size: var(--font-size-normal);
  color: rgb(var(--color-on-container));
  font-weight: 600;
  user-select: none;
}

/* @supports (font-variation-settings: normal) {
  body {
    font-family: "Inter var", sans-serif;
  }
} */

.base {
  height: 100%;
  overflow-y: hidden;
  display: flex;
  flex-direction: column;
}

.notif-box {
  display: flex;
  height: 0;
  flex-direction: column;
  transition: height 0.3s ease-out;
  &:has(.notif) {
    height: 16rem;
  }
  .notif {
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: var(--layer-top);
    transform: translateY(-20rem);
    height: 0rem;
    position: fixed;
    font-size: var(--font-size-normal);
    border-radius: 2rem;
    transition-property: transform, filter;
    transition-duration: 0.4s;
    transition-timing-function: ease-in-out;
    &:first-child {
      flex: 1;
      position: sticky;
      filter: brightness(1);
    }
    &:not(:first-child) {
      height: 16rem;
      width: 100%;
      text-align: center;
    }
    &.show {
      transition-delay: 0.2s;
      transform: translateY(-2rem);
      &:not(:first-child) {
        filter: brightness(0.9);
        transform: translateY(5rem) scale(0.96);
      }
    }
    &.error {
      background-color: rgb(var(--color-error-container));
      color: rgb(var(--color-on-error-container));
    }
    &.success {
      background-color: rgb(var(--color-primary-container));
      color: rgb(var(--color-on-primary-container));
    }
    &.info {
      background-color: rgb(var(--color-surface));
      color: rgb(var(--color-on-surface));
    }
  }
}

.app {
  flex: 1;
  width: 100%;
  height: 100%;
  scrollbar-width: none;
  overflow-y: auto;
  overscroll-behavior: contain;
  scroll-padding-top: 18rem;
  transition: all 0.4s ease-out;
  max-width: 174rem;
  margin: 0 auto;
}

.header {
  /* -2px to cover the lower elements more precisely */
  margin: 0 calc(var(--spacing) - 2px);
  position: sticky;
  top: 0;
  z-index: var(--layer-normal);
  height: 135rem;
  background: linear-gradient(
    rgb(var(--color-container)) 90%,
    rgb(var(--color-container) / 0.9) 95%,
    rgb(var(--color-container) / 0.8) 100%
  );
  transition: background 0.4s ease-out;
  backdrop-filter: blur(10px);

  .temp_cur {
    position: absolute;
    bottom: 8rem;
    color: rgb(var(--color-primary));
    font-size: var(--font-size-max);
  }
  .temp_secondary {
    position: absolute;
    bottom: 0;
    font-size: var(--font-size-middle);
  }
  .icon_main {
    position: absolute;
    top: 12rem;
    right: 0;
    width: 24rem;
    height: 24rem;
    cursor: pointer;
    background-size: cover;
    /* url("./assets/icons/dark/unknown.png") */
    background-image: var(--icon-url);
    filter: drop-shadow(1px 2px 2px rgb(0 0 0 / 0.6));
  }
}

.content {
  margin: 8rem var(--spacing) 0;
  .items {
    position: relative;
    display: flex;
    gap: var(--spacing);
    justify-content: space-between;
    align-items: center;
    &:not(:first-child) {
      margin-top: var(--spacing);
    }
    &.forecast {
      @media screen and (max-width: 480px) {
        & {
          scrollbar-width: none;
        }
      }
      font-size: var(--font-size-small);
      overflow-x: auto;
      scroll-snap-type: x mandatory;
      scroll-padding-left: 3rem;
      .list_forecast {
        display: flex;
        height: 20rem;
        flex-wrap: nowrap;
        .item_forecast {
          display: flex;
          justify-content: space-between;
          flex-direction: column;
          align-items: center;
          scroll-snap-align: start;
          padding: 0 4.5rem;
          text-align: center;
          P {
            line-height: 3rem;
          }
          img {
            pointer-events: none;
            user-select: none;
            width: 10.5rem;
          }
        }
      }
    }
  }
}

.block {
  border-radius: var(--radius);
  padding: calc(var(--radius) / 3 * 2);
  line-height: 9rem;
  transition: all 0.4s ease-out;
  color: rgb(var(--color-on-secondary-container));
  background-color: rgb(var(--color-secondary-container) / 0.3);
  &:has(.num_aqi) {
    color: rgb(var(--light-color-on-background));
  }
  &:has(.rank_1) {
    background-color: rgb(0 153 102);
  }
  &:has(.rank_2) {
    background-color: rgb(255 222 51);
  }
  &:has(.rank_3) {
    background-color: rgb(255 153 51);
  }
  &:has(.rank_4) {
    background-color: rgb(204 0 51);
  }
  &:has(.rank_5) {
    background-color: rgb(102 0 153);
  }
  &:has(.rank_6) {
    background-color: rgb(126 0 35);
  }
}

.desc,
.cotton {
  flex: 1;
  text-align: center;
}

.sun_info {
  position: relative;
  --sunrisePer: calc(var(--time_sunrise) / 0.24 * 1%);
  --sunsetPer: calc(var(--time_sunset) / 0.24 * 1%);
  display: block;
  width: 100%;
  aspect-ratio: 3;
  margin-bottom: 6rem;
  border-radius: 50%/100% 100% 0 0;
  border: 1px solid rgb(var(--color-on-secondary-container));
  font-size: var(--font-size-small);
  background-image: linear-gradient(
    to right,
    transparent calc(var(--sunrisePer) - 2px),
    red calc(var(--sunrisePer)),
    transparent calc(var(--sunrisePer)),
    transparent calc(var(--sunsetPer) - 2px),
    #e96e50 calc(var(--sunsetPer)),
    transparent calc(var(--sunsetPer))
  );
  & :is(.time_sunrise, .time_sunset) {
    position: absolute;
    bottom: -9rem;
    transform: translateX(-50%);
  }

  .time_sunrise {
    left: calc(var(--sunrisePer));
    &::before {
      content: '日出 ';
    }
  }
  .time_sunset {
    left: calc(var(--sunsetPer));
    &::before {
      content: '日落 ';
    }
  }
}

.deg_wind {
  position: relative;
  text-align: center;
  border-radius: 100%;
  width: 9rem;
  height: 9rem;
  color: rgb(var(--color-on-secondary));
  background-color: rgb(var(--color-secondary));
  transform: scale(1.6);
  .cursor_icon {
    width: 9rem;
    height: 9rem;
    transform: rotate(calc(var(--deg) - 180deg)) scale(0.4);
  }
  &::before {
    display: block;
    font-size: var(--font-size-small);
    content: 'N';
    transform: translate(-50%, -34%) scale(0.6);
    position: absolute;
    top: 0;
    left: 4.5rem;
  }
}

.light .switch-mode-btn {
  transform: rotateZ(-90deg);
}

.dark .switch-mode-btn {
  transform: rotateZ(90deg);
}

.footer {
  text-align: center;
  margin: 90rem var(--spacing) var(--spacing);
  line-height: 6rem;
  font-size: var(--font-size-small);
  a {
    color: #e96e50 !important;
  }
}

.loading_ani {
  width: 100%;
  position: absolute;
  opacity: 0;
  z-index: var(--layer-top);
  transition: 0.2s;
  pointer-events: none;
  --ani-play-state: paused;
  &.show {
    opacity: 1;
    pointer-events: all;
    transform: translateY(20rem);
    --ani-play-state: running;
  }
  .bg_ani {
    --ani-delay: 0s;
    margin: 0 auto;
    width: 10rem;
    height: 10rem;
    border-radius: 100%;
    overflow: hidden;
    border: 2px solid rgb(var(--color-primary));
    animation: colorChange 2.8s ease-in-out var(--ani-delay) infinite;
    animation-play-state: var(--ani-play-state);
    &::before {
      width: 100%;
      height: 100%;
      border-radius: 100%;
      display: block;
      content: '';
      animation-name: move, colorChange;
      animation-duration: 1.4s, 2.8s;
      animation-timing-function: ease, steps(1, start);
      animation-iteration-count: infinite;
      animation-delay: var(--ani-delay);
      animation-play-state: var(--ani-play-state);
    }
  }
}

.switch-mode-btn {
  position: absolute;
  width: 5rem;
  height: 5rem;
  border-radius: 100%;
  bottom: 5rem;
  right: 5rem;
  cursor: pointer;
  background-color: rgb(var(--color-on-primary));
  border: 2px solid rgb(var(--color-primary));
  overflow: hidden;
  transition: all 0.4s ease-out;
  &::before {
    border-radius: 100%;
    content: '';
    display: block;
    width: 200%;
    height: 200%;
    background-color: rgb(var(--color-primary));
    transition: all 0.8s ease-in-out;
  }
  :where(.auto) &::before {
    border-radius: 0;
    transform: translate(-75%, -25%);
  }
  :where(.light) &::before {
    transform: translate(-76%, -25%);
  }
  :where(.dark) &::before {
    transform: translate(26%, -25%);
  }
}

.loading {
  filter: blur(16px) grayscale(1);
  overflow: hidden;
  pointer-events: none;
  transform: translateY(30rem);
}

.shadow {
  border-bottom: 1px solid rgb(var(--color-outline) / 0.3);
}

.settings {
  position: relative;
  --radius: 7.5rem;
  --padding: calc(var(--radius) / 3 * 2);
  --label_width: 20rem;
  display: flex;
  gap: var(--spacing);
  flex-direction: column;
  height: min(65%, calc(100% - 39rem));
  /* height: calc(100% - 39rem); */
  width: 100%;
  max-width: 174rem;
  margin: 0 auto;
  border-radius: var(--radius) var(--radius) 0 0;
  padding: var(--padding);
  background-color: rgb(var(--color-secondary-container));
  color: rgb(var(--color-on-secondary-container));
  transition: 0.6s ease-in-out;
  &.show {
    transform: translateY(-100%);
  }
  .title {
    text-align: center;
    font-size: var(--font-size-middle);
  }
  .main {
    flex: 1;
    gap: var(--spacing);
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }
  .items-settings {
    display: flex;
    width: 100%;
    gap: var(--spacing);
    height: 9rem;
    line-height: 9rem;
    p {
      width: var(--label_width);
      text-wrap: nowrap;
    }
    .api_key {
      flex: 1;
    }
    .form-container {
      flex: 1;
      position: relative;
    }
  }
  .result_list,
  .items-saved {
    width: 100%;
    text-align: center;
    padding: 2rem;
    border-radius: 4rem;
  }
  .result_list {
    background-color: rgb(var(--color-secondary));
    color: rgb(var(--color-on-secondary));
    p {
      cursor: pointer;
      line-height: 9rem;
      width: 100%;
      transition: 0.4s ease-in-out;
      &:hover {
        color: rgb(var(--color-on-primary));
      }
      span {
        font-size: var(--font-size-small);
      }
    }
  }
  .items-saved {
    /* background-color: rgb(var(--color-tertiary-container)); */
    /* color: rgb(var(--color-on-tertiary-container)); */
    background-color: rgb(var(--color-tertiary));
    color: rgb(var(--color-on-tertiary));
    overflow-y: auto;
    scrollbar-width: none;
    p {
      height: 12rem;
      line-height: 12rem;
    }
  }
  .version {
    text-align: center;
    font-weight: normal;
  }
}

@keyframes breathing {
  0%,
  100% {
    border-color: rgb(var(--color-outline));
  }
  50% {
    border-color: rgb(var(--color-primary));
  }
}
@keyframes colorChange {
  0%,
  100% {
    background-color: rgb(var(--color-primary));
  }
  50% {
    background-color: rgb(var(--color-on-primary));
  }
}

@keyframes move {
  0% {
    transform: translate(-120%, 0);
  }
  50% {
    transform: translate(0%, -30%) scale(0.5);
  }
  100% {
    transform: translate(120%, 0);
  }
}
